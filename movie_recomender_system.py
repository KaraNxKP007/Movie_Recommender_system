# -*- coding: utf-8 -*-
"""movie-recomender-system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LFWwvbmrGD3t1Gz31yNCu9K09Rf1JoFe
"""

import numpy as np
import pandas as pd

movies=pd.read_csv('/content/tmdb_5000_movies.csv')
credits=pd.read_csv('/content/tmdb_5000_credits.csv')

movies.head(1)

credits.head(1)

# title is the common column so we can merge these two dataset based on the title

movies=movies.merge(credits,on='title')

movies.head(2)

movies.shape

movies.info()

# Content based recommender

#Useful columns
#>> genres , id , keywords , title , overview , cast , crew

movies=movies[['movie_id' , 'title' , 'overview' , 'genres' , 'keywords' , 'cast' , 'crew']]

movies.head()

movies.isnull().sum()

movies.dropna(inplace=True)

movies.duplicated().sum()

movies.iloc[0].genres

## [{"id": 28, "name": "Action"}, {"id": 12, "name": "Adventure"}, {"id": 14, "name": "Fantasy"}, {"id": 878, "name": "Science Fiction"}]
##       >> is in the string format so we need to convert it to list before use

## ['Action' , 'Adventure' , 'Fantansy' , 'Sci-fi' ]

import ast
ast.literal_eval('[{"id": 28, "name": "Action"}, {"id": 12, "name": "Adventure"}, {"id": 14, "name": "Fantasy"}, {"id": 878, "name": "Science Fiction"}]')

def convert(obj):
  L=[]
  for i in  ast.literal_eval(obj):
    L.append(i['name'])
  return L

movies['genres']=movies['genres'].apply(convert)

movies.head()

movies['keywords']=movies['keywords'].apply(convert)

movies.head()

movies['cast'][0] ## so we only need top[ 3 actor of the movie so accordingly we will write the code

def convert3(obj):
  L=[]
  counter = 0
  for i in ast.literal_eval(obj):
    if counter!=3:
      L.append(i['name'])
      counter+=1
    else:
      break

  return L

movies['cast']=movies['cast'].apply(convert3)

movies.head()

movies['crew'][0]

def fetch_director(obj):
  L=[]
  for i in ast.literal_eval(obj):
    if i['job'] == 'Director':
      L.append(i['name'])
      break
  return L

movies['crew']=movies['crew'].apply(fetch_director)

movies.head()

movies['overview'][0] ##It is string so we will convert this into list so we can easily append the multiple columns

movies['overview']=movies['overview'].apply(lambda x:x.split())

movies.head()

## Important thing to do is that we need to remove all the spaces present between the word to remove confusion between sam worthington and sam mendes
## Because sam tag will be common so model will recommend us both movies but i dont want all i want for particular person


movies['genres']=movies['genres'].apply(lambda x:[i.replace(" ","") for i in x])

movies['keywords']=movies['keywords'].apply(lambda x:[i.replace(" ","") for i in x])

movies['cast']=movies['cast'].apply(lambda x:[i.replace(" ","") for i in x])

movies['crew']=movies['crew'].apply(lambda x:[i.replace(" ","") for i in x])

movies.head()

movies['tag']=movies['overview']+movies['genres']+movies['keywords']+movies['cast']+movies['crew']

movies.head()

new_df=movies[['movie_id' , 'title' , 'tag']]

new_df.head()

new_df['tag']=new_df['tag'].apply(lambda x:" ".join(x))

new_df.head()

new_df['tag'][0]

new_df['tag']=new_df['tag'].apply(lambda x:x.lower())

new_df.head()

import nltk

from nltk.stem.porter import PorterStemmer
ps=PorterStemmer()

def stem(text):
  y=[]

  for i in text.split():
    y.append(ps.stem(i))

  return " ".join(y)

new_df['tag']=new_df['tag'].apply(stem)

#Vectorization of words

from sklearn.feature_extraction.text import CountVectorizer
cv=CountVectorizer(max_features=5000 , stop_words='english')

vectors=cv.fit_transform(new_df['tag']).toarray()

cv.fit_transform(new_df['tag']).toarray().shape

vectors[0] #avatar tag

cv.get_feature_names_out()

#Now the problem is that we want to have the words of actor actors , action actions as one single entity for this we will going to use the steming method
# ['loved','love','loving']
# >>
# ['love','love','love']

stem('loved')

stem('In the 22nd century, a paraplegic Marine is dispatched to the moon Pandora on a unique mission, but becomes torn between following orders and protecting an alien civilization. Action Adventure Fantasy ScienceFiction cultureclash future spacewar spacecolony society spacetravel futuristic romance space alien tribe alienplanet cgi marine soldier battle loveaffair antiwar powerrelations mindandsoul 3d SamWorthington ZoeSaldana SigourneyWeaver JamesCameron')

# Distances between movies

from sklearn.metrics.pairwise import cosine_similarity

similarity=cosine_similarity(vectors)

cosine_similarity(vectors).shape    ## 4806 movies

similarity[0]

list(enumerate(similarity[0]))[1:6]  # similarity of avatar movies with other

sorted(list(enumerate(similarity[0])),reverse=True,key=lambda x:x[1])[1:6] #now the sorting on the basis of similarity

similarity[0]

new_df[new_df['title']=='Batman Begins'].index[0]

#creating a function which will going to return the 5 similiar movies

def recommend(movie):
  movie_index= new_df[new_df['title']==movie].index[0]
  distances=similarity[movie_index]
  movies_list=sorted(list(enumerate(distances)),reverse=True,key=lambda x:x[1])[1:6]

  for i in movies_list:
    print(new_df.iloc[i[0]].title)

recommend('Batman Begins')

import pickle

new_df['title'].values

#rather than sendin the dataframe we will send the dictionary to code
pickle.dump(new_df.to_dict(),open('movie_dict.pkl','wb'))

pickle.dump(similarity,open('similarity.pkl','wb'))

